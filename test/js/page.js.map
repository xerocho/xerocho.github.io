{"version":3,"file":"page.js","sources":["../../src/js/page/utils.js","../../src/js/page/ui/pan-zoom.js","../../src/js/page/ui/results.js","../../node_modules/rollup-plugin-node-builtins/src/es6/events.js","../../src/js/utils/storage.js","../../src/js/page/worker-messenger.js","../../src/js/page/gzip.js","../../src/js/page/svg-file.js","../../src/js/page/ui/svg-output.js","../../src/js/page/ui/code-output.js","../../src/js/page/prism.js","../../src/js/page/ui/output.js","../../src/js/page/ui/ripple.js","../../src/js/page/ui/spinner.js","../../src/js/page/ui/floating-action-button.js","../../src/js/page/ui/download-button.js","../../src/js/page/ui/copy-button.js","../../src/js/page/ui/bg-fill-button.js","../../src/js/page/ui/material-slider.js","../../src/js/page/ui/settings.js","../../src/js/page/ui/main-menu.js","../../src/js/page/ui/toasts.js","../../src/js/page/ui/file-drop.js","../../src/js/page/ui/preloader.js","../../src/js/page/ui/changelog.js","../../src/js/page/ui/results-container.js","../../src/js/page/ui/view-toggler.js","../../src/js/page/results-cache.js","../../src/js/page/ui/main-ui.js","../../src/js/page/main-controller.js","../../src/js/page/svgo.js","../../src/js/page/index.js"],"sourcesContent":["\"use strict\";\r\n\r\nexport const domReady = new Promise(resolve => {\r\n  function checkState() {\r\n    if (document.readyState != 'loading') resolve();\r\n  }\r\n  document.addEventListener('readystatechange', checkState);\r\n  checkState();\r\n});\r\n\r\nconst range = document.createRange();\r\nrange.selectNode(document.documentElement);\r\n\r\nexport function strToEl(str) {\r\n  const frag = range.createContextualFragment(str);\r\n  return frag.children[0];\r\n}\r\n\r\nconst entityMap = {\r\n  \"&\": \"&amp;\",\r\n  \"<\": \"&lt;\",\r\n  \">\": \"&gt;\",\r\n  '\"': '&quot;',\r\n  \"'\": '&#39;',\r\n  \"/\": '&#x2F;'\r\n};\r\n\r\nexport function escapeHTML(str) {\r\n  return String(str).replace(/[&<>\"'\\/]/g, s => entityMap[s]);\r\n}\r\n\r\nexport function escapeHtmlTag(strings, ...values) {\r\n  values = values.map(s => escapeHTML(s));\r\n  return strings.reduce((str, val, i) => str += val + (values[i] || ''), '');\r\n};\r\n\r\nexport function readFileAsText(file) {\r\n  return new Response(file).text();\r\n};\r\n\r\nfunction transitionClassFunc({removeClass = false}={}) {\r\n  return function(el, className = 'active', transitionClass = 'transition') {\r\n    if (removeClass) {\r\n      if (!el.classList.contains(className)) return Promise.resolve();\r\n    }\r\n    else {\r\n      if (el.classList.contains(className)) return Promise.resolve();\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n      const listener = event => {\r\n        if (event.target != el) return;\r\n        el.removeEventListener('webkitTransitionEnd', listener);\r\n        el.removeEventListener('transitionend', listener);\r\n        el.classList.remove(transitionClass);\r\n        resolve();\r\n      };\r\n\r\n      el.classList.add(transitionClass);\r\n\r\n      requestAnimationFrame(() => {\r\n        el.addEventListener('webkitTransitionEnd', listener);\r\n        el.addEventListener('transitionend', listener);\r\n        el.classList[removeClass ? 'remove' : 'add'](className);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport const transitionToClass = transitionClassFunc();\r\nexport const transitionFromClass = transitionClassFunc({removeClass: true});\r\n\r\nexport function loadCss(url) {\r\n  return new Promise((resolve, reject) => {\r\n    const link = document.createElement('link');\r\n    link.rel = 'stylesheet';\r\n    link.href = url;\r\n\r\n    link.addEventListener('load', () => resolve());\r\n    link.addEventListener('error', () => reject());\r\n\r\n    document.head.appendChild(link);\r\n  });\r\n};\r\n\r\nexport function trackFocusMethod() {\r\n  var focusMethod = 'mouse';\r\n\r\n  document.body.addEventListener('focus', event => {\r\n    event.target.classList.add(focusMethod == 'key' ? 'key-focused' : 'mouse-focused');\r\n  }, true);\r\n\r\n  document.body.addEventListener('blur', event => {\r\n    event.target.classList.remove('key-focused');\r\n    event.target.classList.remove('mouse-focused');\r\n  }, true);\r\n\r\n  document.body.addEventListener('keydown', () => {\r\n    focusMethod = 'key';\r\n  }, true);\r\n\r\n  document.body.addEventListener('mousedown', () => {\r\n    focusMethod = 'mouse';\r\n  }, true);\r\n};\r\n","function getXY(obj) {\r\n  return {\r\n    x: obj.pageX,\r\n    y: obj.pageY\r\n  };\r\n}\r\n\r\nfunction touchDistance(touch1, touch2) {\r\n  const dx = Math.abs(touch2.x - touch1.x);\r\n  const dy = Math.abs(touch2.y - touch1.y);\r\n  return Math.sqrt(dx*dx + dy*dy);\r\n}\r\n\r\nfunction getMidpoint(point1, point2) {\r\n  return {\r\n    x: (point1.x + point2.x) / 2,\r\n    y: (point1.y + point2.y) / 2\r\n  };\r\n}\r\n\r\nfunction getPoints(event) {\r\n  if (event.touches) {\r\n    return Array.from(event.touches).map(t => getXY(t));\r\n  }\r\n  else {\r\n    return [getXY(event)];\r\n  }\r\n}\r\n\r\nexport default class PanZoom {\r\n  constructor(target, {\r\n    eventArea = target,\r\n    shouldCaptureFunc = () => true\r\n  }={}) {\r\n    this._target = target;\r\n    this._shouldCaptureFunc = shouldCaptureFunc;\r\n    this._dx = 0;\r\n    this._dy = 0;\r\n    this._scale = 1;\r\n    this._active = 0;\r\n    this._lastPoints = [];\r\n\r\n    // bind\r\n    [\r\n      '_onPointerDown',\r\n      '_onPointerMove',\r\n      '_onPointerUp'\r\n    ].forEach(funcName => {\r\n      this[funcName] = this[funcName].bind(this);\r\n    })\r\n\r\n    // bound events\r\n    eventArea.addEventListener('mousedown', this._onPointerDown);\r\n    eventArea.addEventListener('touchstart', this._onPointerDown);\r\n\r\n    // unbonud\r\n    eventArea.addEventListener('wheel', e => this._onWheel(e));\r\n  }\r\n\r\n  reset() {\r\n    this._dx = 0;\r\n    this._dy = 0;\r\n    this._scale = 1;\r\n    this._update();\r\n  }\r\n\r\n  _onWheel(event) {\r\n    if (!this._shouldCaptureFunc(event.target)) return;\r\n    event.preventDefault();\r\n\r\n    const boundingRect = this._target.getBoundingClientRect();\r\n    let delta = event.deltaY;\r\n\r\n    if (event.deltaMode === 1) { // 1 is \"lines\", 0 is \"pixels\"\r\n      // Firefox uses \"lines\" when mouse is connected\r\n      delta *= 15;\r\n    }\r\n\r\n    // stop mouse wheel producing huge values\r\n    delta = Math.max(Math.min(delta, 60), -60);\r\n\r\n    const scaleDiff = (delta / 300) + 1;\r\n\r\n    // avoid to-small values\r\n    if (this._scale * scaleDiff < 0.05) return;\r\n\r\n    this._scale *= scaleDiff;\r\n    this._dx -= (event.pageX - boundingRect.left) * (scaleDiff - 1);\r\n    this._dy -= (event.pageY - boundingRect.top) * (scaleDiff - 1);\r\n    this._update();\r\n  }\r\n\r\n  _onFirstPointerDown(event) {\r\n    document.addEventListener('mousemove', this._onPointerMove);\r\n    document.addEventListener('mouseup', this._onPointerUp);\r\n    document.addEventListener('touchmove', this._onPointerMove);\r\n    document.addEventListener('touchend', this._onPointerUp);\r\n  }\r\n\r\n  _onPointerDown(event) {\r\n    if (event.type == 'mousedown' && event.which != 1) return;\r\n    if (!this._shouldCaptureFunc(event.target)) return;\r\n    event.preventDefault();\r\n\r\n    this._lastPoints = getPoints(event);\r\n    this._active++;\r\n\r\n    if (this._active === 1) {\r\n      this._onFirstPointerDown(event);\r\n    }\r\n  }\r\n\r\n  _onPointerMove(event) {\r\n    event.preventDefault();\r\n    const points = getPoints(event);\r\n    const averagePoint = points.reduce(getMidpoint);\r\n    const averageLastPoint = this._lastPoints.reduce(getMidpoint);\r\n    const boundingRect = this._target.getBoundingClientRect();\r\n\r\n    this._dx += averagePoint.x - averageLastPoint.x;\r\n    this._dy += averagePoint.y - averageLastPoint.y;\r\n\r\n    if (points[1]) {\r\n      const scaleDiff = touchDistance(points[0], points[1]) / touchDistance(this._lastPoints[0], this._lastPoints[1]);\r\n      this._scale *= scaleDiff;\r\n      this._dx -= (averagePoint.x - boundingRect.left) * (scaleDiff - 1);\r\n      this._dy -= (averagePoint.y - boundingRect.top) * (scaleDiff - 1);\r\n    }\r\n\r\n    this._update();\r\n    this._lastPoints = points;\r\n  }\r\n\r\n  _update() {\r\n    this._target.style.WebkitTransform = this._target.style.transform\r\n      = `translate3d(${this._dx}px, ${this._dy}px, 0) scale(${this._scale})`;\r\n  }\r\n\r\n  _onPointerUp(event) {\r\n    event.preventDefault();\r\n    this._active--;\r\n    this._lastPoints.pop();\r\n\r\n    if (this._active) {\r\n      this._lastPoints = getPoints(event);\r\n      return;\r\n    }\r\n\r\n    document.removeEventListener('mousemove', this._onPointerMove);\r\n    document.removeEventListener('mouseup', this._onPointerUp);\r\n    document.removeEventListener('touchmove', this._onPointerMove);\r\n    document.removeEventListener('touchend', this._onPointerUp);\r\n  }\r\n}\r\n","import { strToEl } from '../utils';\r\n\r\nfunction round(num, places) {\r\n  const mult = Math.pow(10, places);\r\n  return Math.floor(Math.round(num * mult)) / mult;\r\n}\r\n\r\nfunction humanSize(bytes) {\r\n  if (bytes < 1024) {\r\n    return bytes + ' bytes';\r\n  }\r\n  else {\r\n    return round(bytes / 1024, 2) + 'k';\r\n  }\r\n}\r\n\r\nexport default class Results {\r\n  constructor() {\r\n    this.container = strToEl(\r\n      '<div class=\"results\">' +\r\n        '<span class=\"size\"></span> ' +\r\n        '<span class=\"diff\"></span>' +\r\n    \t'<span class=\"remain\"></span>' +\r\n    \t'<span class=\"over\"></span>' +\r\n      '</div>' +\r\n    '');\r\n\r\n    this._sizeEl = this.container.querySelector('.size');\r\n    this._newSizeEl = this.container.querySelector('.newSize');\r\n    this._diffEl = this.container.querySelector('.diff');\r\n  \tthis._remainEl = this.container.querySelector('.remain');\r\n  \tthis._overEl = this.container.querySelector('.over');\r\n  }\r\n\r\n  update({ size, comparisonSize }) {\r\n  \tconst tmp = size-15359;\r\n    if (comparisonSize) {\r\n        this._sizeEl.textContent = humanSize(comparisonSize) + ' → ' + humanSize(size);// + '  ('+ size.toFixed() +'/15359 [' + tmp.toFixed() + '])';\r\n    } else {\r\n      this._sizeEl.textContent = humanSize(size);\r\n    }\r\n\r\n    this._diffEl.classList.remove('decrease', 'increase');\r\n\r\n    // just displaying a single size?\r\n    if (!comparisonSize) {\r\n      this._diffEl.textContent = '';\r\n      this._overEl.textContent = '';\r\n      return;\r\n    }\r\n    else if (size === comparisonSize) {\r\n      this._diffEl.textContent = '100%';\r\n    }\r\n    else {\r\n      this._diffEl.textContent = round(size / comparisonSize * 100, 2) + '%';\r\n      this._diffEl.classList.add(size > comparisonSize ? 'increase' : 'decrease');\r\n    }\r\n  \t\r\n  \tthis._remainEl.textContent = '  ('+ size.toFixed() +'/15359)';\r\n\r\n  \tthis._overEl.classList.remove('decrease', 'increase');\r\n  \tif ( tmp < 0 ) {\r\n  \t\tthis._overEl.textContent = '[ ' + tmp.toFixed() + ' ]';\r\n  \t\tthis._overEl.classList.add( 'increase' );\r\n  \t} else {\r\n  \t\tthis._overEl.textContent = '[ +' + tmp.toFixed() + ' ]';\r\n  \t\tthis._overEl.classList.add( 'decrease' );\r\n  \t}\r\n  }\r\n}\r\n","'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","export let idbKeyval = (() => {\r\n  let db;\r\n\r\n  function getDB() {\r\n    if (!db) {\r\n      db = new Promise((resolve, reject) => {\r\n        const openreq = indexedDB.open('svgo-keyval', 1);\r\n\r\n        openreq.onerror = () => {\r\n          reject(openreq.error);\r\n        };\r\n\r\n        openreq.onupgradeneeded = () => {\r\n          // First time setup: create an empty object store\r\n          openreq.result.createObjectStore('keyval');\r\n        };\r\n\r\n        openreq.onsuccess = () => {\r\n          resolve(openreq.result);\r\n        };\r\n      });\r\n    }\r\n    return db;\r\n  }\r\n\r\n  async function withStore(type, callback) {\r\n    const db = await getDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction('keyval', type);\r\n      transaction.oncomplete = () => resolve();\r\n      transaction.onerror = () => reject(transaction.error);\r\n      callback(transaction.objectStore('keyval'));\r\n    });\r\n  }\r\n\r\n  return {\r\n    async get(key) {\r\n      let req;\r\n      await withStore('readonly', store => {\r\n        req = store.get(key);\r\n      });\r\n      return req.result;\r\n    },\r\n    set(key, value) {\r\n      return withStore('readwrite', store => {\r\n        store.put(value, key);\r\n      });\r\n    },\r\n    delete(key) {\r\n      return withStore('readwrite', store => {\r\n        store.delete(key);\r\n      });\r\n    }\r\n  };\r\n})();\r\n\r\n// iOS add-to-homescreen is missing IDB, or at least it used to.\r\n// I haven't tested this in a while.\r\nif (!self.indexedDB) {\r\n  idbKeyval = {\r\n    get: key => Promise.resolve(localStorage.getItem(key)),\r\n    set: (key, val) => Promise.resolve(localStorage.setItem(key, val)),\r\n    delete: key => Promise.resolve(localStorage.removeItem(key))\r\n  };\r\n}\r\n","\"use strict\";\r\n\r\nexport default class WorkerMessenger {\r\n  constructor(url) {\r\n    this._requestId = 0;\r\n    // worker jobs awaiting response { [requestId]: [ resolve, reject ] }\r\n    this._pending = {};\r\n    this._url = url;\r\n    this._worker = new Worker(this._url);\r\n    this._worker.onmessage = event => this._onMessage(event);\r\n  }\r\n\r\n  async release() {\r\n    if (this._worker) {\r\n      this._worker.terminate();\r\n      this._worker = null;\r\n    }\r\n    for (const key of Object.keys(this._pending)) {\r\n      this._fulfillPending(id, null, new Error(\"Worker terminated: \" + this._url));\r\n    }\r\n  }\r\n\r\n  _postMessage(message) {\r\n    this._worker.postMessage(message);\r\n  }\r\n\r\n  _onMessage(event) {\r\n    if (!event.data.id) {\r\n      console.log(\"Unexpected message\", event);\r\n      return;\r\n    }\r\n\r\n    this._fulfillPending(event.data.id, event.data.result, event.data.error);\r\n  }\r\n\r\n  _fulfillPending(id, result, error) {\r\n    const resolver = this._pending[id];\r\n\r\n    if (!resolver) {\r\n      console.log(\"No resolver for\", { id, result, error });\r\n      return;\r\n    }\r\n\r\n    delete this._pending[id];\r\n\r\n    if (error) {\r\n      resolver[1](new Error(error));\r\n      return;\r\n    }\r\n\r\n    resolver[0](result);\r\n  }\r\n\r\n  _requestResponse(message) {\r\n    return new Promise((resolve, reject) => {\r\n      message.id = ++this._requestId;\r\n      this._pending[message.id] = [resolve, reject];\r\n      this._postMessage(message);\r\n    });\r\n  }\r\n}\r\n","import WorkerMessenger from './worker-messenger';\r\n\r\nclass Gzip extends WorkerMessenger {\r\n  constructor() {\r\n    super('js/gzip-worker.js');\r\n  }\r\n\r\n  compress(svgData) {\r\n    return this._requestResponse({\r\n      data: svgData\r\n    });\r\n  }\r\n}\r\n\r\nexport const gzip = new Gzip();\r\n","import { gzip } from './gzip';\r\n\r\nexport default class SvgFile {\r\n  constructor(text, width, height) {\r\n    this.text = text;\r\n    this._compressedSize = null;\r\n    this._url = '';\r\n    this._blob = null;\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n\r\n  async size({ compress }) {\r\n    if (!compress) {\r\n      return this.text.length;\r\n    }\r\n\r\n    if (!this._compressedSize) {\r\n      this._compressedSize = gzip.compress(this.text).then(r => r.byteLength);\r\n    }\r\n\r\n    return this._compressedSize;\r\n  }\r\n\r\n  _create() {\r\n    // IE GCs blobs once they're out of reference, even if they\r\n    // have an object url, so we have to keep in in reference.\r\n    this._blob = new Blob([this.text], {type: \"image/svg+xml\"});\r\n    this._url = URL.createObjectURL(this._blob);\r\n  }\r\n\r\n  get blob() {\r\n    if (!this._blob) this._create();\r\n    return this._blob;\r\n  }\r\n\r\n  get url() {\r\n    if (!this._url) this._create();\r\n    return this._url;\r\n  }\r\n\r\n  release() {\r\n    if (!this._url) return;\r\n\r\n    this._blob = null;\r\n    URL.revokeObjectURL(this._url);\r\n  }\r\n}\r\n","import { domReady, strToEl } from '../utils';\r\nimport PanZoom from './pan-zoom';\r\n\r\nexport default class SvgOutput {\r\n  constructor() {\r\n    this.container = strToEl(\r\n      '<div class=\"svg-output\">' +\r\n        '<div class=\"svg-container\">' +\r\n          '<iframe class=\"svg-frame\" sandbox=\"allow-scripts\"></iframe>' +\r\n        '</div>' +\r\n        // Stop touches going into the iframe.\r\n        // pointer-events + touch + iframe doesn't work in Chrome :(\r\n        '<div class=\"svg-clickjacker\"></div>' +\r\n      '</div>' +\r\n    '');\r\n\r\n\r\n    this._svgFrame = this.container.querySelector('.svg-frame');\r\n    this._svgFrame.scrolling = 'no';\r\n\r\n    this._svgContainer = this.container.querySelector('.svg-container');\r\n\r\n    domReady.then(() => {\r\n      this._panZoom = new PanZoom(this._svgContainer, {\r\n        eventArea: this.container\r\n      });\r\n    });\r\n  }\r\n\r\n  setSvg(svgFile) {\r\n    // I would rather use blob urls, but they don't work in Firefox\r\n    // All the internal refs break.\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1125667\r\n    const nextLoad = this._nextLoadPromise();\r\n    this._svgFrame.src = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(svgFile.text);\r\n    this._svgFrame.width = svgFile.width;\r\n    this._svgFrame.height = svgFile.height;\r\n    return nextLoad;\r\n  }\r\n\r\n  reset() {\r\n    this._svgFrame.src = \"about:blank\";\r\n    this._panZoom.reset();\r\n  }\r\n\r\n  _nextLoadPromise() {\r\n    return new Promise(resolve => {\r\n      const onload = () => {\r\n        this._svgFrame.removeEventListener('load', onload);\r\n        resolve();\r\n      }\r\n      this._svgFrame.addEventListener('load', onload);\r\n    });\r\n  }\r\n}\r\n","import { strToEl } from '../utils';\r\nimport Prism from '../prism';\r\nconst prism = new Prism();\r\n\r\nexport default class CodeOutput {\r\n  constructor() {\r\n    this.container = strToEl(\r\n      '<div class=\"code-output\">' +\r\n        '<pre><code></code></pre>' +\r\n      '</div>' +\r\n    '');\r\n    this._codeEl = this.container.querySelector('code');\r\n  }\r\n\r\n  async setSvg(svgFile) {\r\n    this._codeEl.innerHTML = await prism.highlight(svgFile.text);\r\n  }\r\n\r\n  reset() {\r\n    this._codeEl.innerHTML = '';\r\n  }\r\n}\r\n","import WorkerMessenger from './worker-messenger';\r\n\r\nexport default class Prism extends WorkerMessenger {\r\n  constructor() {\r\n    super('js/prism-worker.js');\r\n  }\r\n\r\n  highlight(svgData) {\r\n    return this._requestResponse({\r\n      data: svgData\r\n    });\r\n  }\r\n}\r\n","import { strToEl, transitionToClass, transitionFromClass } from '../utils';\r\nimport SvgOutput from './svg-output';\r\nimport CodeOutput from './code-output';\r\n\r\nexport default class Output {\r\n  constructor() {\r\n    this.container = strToEl(\r\n      '<div class=\"output-switcher\"></div>' +\r\n    '');\r\n\r\n    this._types = {\r\n      image: new SvgOutput(),\r\n      code: new CodeOutput()\r\n    };\r\n\r\n    this._svgFile = null;\r\n    this._switchQueue = Promise.resolve();\r\n    this.set('image', {noAnimate: true});\r\n  }\r\n\r\n  update(svgFile) {\r\n    this._svgFile = svgFile;\r\n    return this._types[this._activeType].setSvg(svgFile);\r\n  }\r\n\r\n  reset() {\r\n    this._types[this._activeType].reset();\r\n  }\r\n\r\n  set(type, {\r\n    noAnimate = false\r\n  }={}) {\r\n    return this._switchQueue = this._switchQueue.then(async () => {\r\n      const toRemove = this._activeType && this._types[this._activeType].container;\r\n\r\n      this._activeType = type;\r\n      const toAdd = this._types[this._activeType].container;\r\n      this.container.appendChild(toAdd);\r\n\r\n      if (this._svgFile) await this.update(this._svgFile);\r\n\r\n      if (noAnimate) {\r\n        toAdd.classList.add('active');\r\n        if (toRemove) toRemove.classList.remove('active');\r\n      }\r\n      else {\r\n        const transitions = [\r\n          transitionToClass(toAdd)\r\n        ];\r\n\r\n        if (toRemove) transitions.push(transitionFromClass(toRemove));\r\n\r\n        await Promise.all(transitions);\r\n      }\r\n\r\n      if (toRemove) this.container.removeChild(toRemove);\r\n    })\r\n  }\r\n}\r\n","import { strToEl } from '../utils';\r\n\r\nexport default class Ripple {\r\n  constructor() {\r\n    this.container = strToEl('<div class=\"ripple\"></div>');\r\n  }\r\n\r\n  animate() {\r\n    this.container.classList.remove('animate');\r\n    this.container.offsetLeft;\r\n    this.container.classList.add('animate');\r\n  }\r\n}\r\n","import { strToEl } from '../utils';\r\n\r\nexport default class Spinner {\r\n  constructor() {\r\n    this.container = strToEl(\r\n      '<div class=\"spinner\">' +\r\n        '<div class=\"spinner-container\">' +\r\n          '<div class=\"spinner-layer\">' +\r\n            '<div class=\"circle-clipper left\">' +\r\n              '<div class=\"circle\"></div>' +\r\n            '</div>' +\r\n            '<div class=\"gap-patch\">' +\r\n              '<div class=\"circle\"></div>' +\r\n            '</div>' +\r\n            '<div class=\"circle-clipper right\">' +\r\n              '<div class=\"circle\"></div>' +\r\n            '</div>' +\r\n          '</div>' +\r\n        '</div>' +\r\n      '</div>' +\r\n    '');\r\n\r\n    this._showTimeout = null;\r\n    this.container.style.display = 'none';\r\n\r\n    const animEndListener = event => {\r\n      if (event.target == this.container) {\r\n        this.container.style.display = 'none';\r\n      }\r\n    };\r\n\r\n    this.container.addEventListener('webkitAnimationEnd', animEndListener);\r\n    this.container.addEventListener('animationend', animEndListener);\r\n  }\r\n\r\n  show(delay = 300) {\r\n    clearTimeout(this._showTimeout);\r\n    this.container.style.display = 'none';\r\n    this.container.classList.remove('cooldown');\r\n    this._showTimeout = setTimeout(() => {\r\n      this.container.style.display = '';\r\n    }, delay);\r\n  }\r\n\r\n  hide() {\r\n    clearTimeout(this._showTimeout);\r\n    this.container.classList.add('cooldown');\r\n  }\r\n}\r\n","import { strToEl } from '../utils';\r\nimport Ripple from './ripple';\r\nimport Spinner from './spinner';\r\n\r\nexport default class FloatingActionButton {\r\n  constructor({ title, href, iconSvg, classList, minor }) {\r\n    this.container = strToEl(\r\n      (href ? '<a>' : '<div role=\"button\" tabindex=\"0\">') +\r\n        iconSvg +\r\n      (href ? '</a>' : '</div>') +\r\n    '');\r\n\r\n    if (href) {\r\n      this.container.href = href;\r\n    }\r\n    if (title) {\r\n      this.container.setAttribute('title', title);\r\n    }\r\n    this.container.classList.add(minor ? 'minor-floating-action-button' : 'floating-action-button');\r\n    if (classList) {\r\n      classList.forEach((className) => { this.container.classList.add(className); });\r\n    }\r\n\r\n    this._ripple = new Ripple();\r\n    this.container.appendChild(this._ripple.container);\r\n\r\n    this._spinner = new Spinner();\r\n    this.container.appendChild(this._spinner.container);\r\n\r\n    this.container.addEventListener('click', event => this._onClick(event));\r\n  }\r\n\r\n  _onClick(event) {\r\n    this._ripple.animate();\r\n  }\r\n\r\n  working() {\r\n    this._spinner.show(500);\r\n  }\r\n\r\n  done() {\r\n    this._spinner.hide();\r\n  }\r\n}\r\n","import FloatingActionButton from './floating-action-button';\r\n\r\nexport default class DownloadButton extends FloatingActionButton {\r\n  constructor() {\r\n    const title = 'Download';\r\n\r\n    super({\r\n      title,\r\n      href: './',\r\n      iconSvg: (\r\n        '<svg viewBox=\"0 0 24 24\" class=\"icon\">' +\r\n          `<title>${title}</title>` +\r\n          '<path d=\"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z\"/>' +\r\n        '</svg>'\r\n      )\r\n    });\r\n\r\n    this._svgFile = null;\r\n  }\r\n\r\n  _onClick(event) {\r\n    super._onClick(event);\r\n\r\n    // IE compat\r\n    if ('msSaveBlob' in navigator) {\r\n      event.preventDefault();\r\n      navigator.msSaveBlob(this._svgFile.blob, this._svgFile.filename);\r\n    }\r\n  }\r\n\r\n  setDownload(filename, svgFile) {\r\n    this.container.download = filename;\r\n    this.container.href = svgFile.url;\r\n\r\n    // for IE compat\r\n    this._svgFile = svgFile;\r\n  }\r\n}\r\n","import FloatingActionButton from './floating-action-button';\r\n\r\nexport const copySupported = (document.queryCommandSupported && document.queryCommandSupported('copy'));\r\n\r\nexport default class CopyButton extends FloatingActionButton {\r\n  constructor() {\r\n    const title = 'Copy as text';\r\n\r\n    super({\r\n      title,\r\n      iconSvg: (\r\n        '<svg viewBox=\"0 0 24 24\" class=\"icon\">' +\r\n          `<title>${title}</title>` +\r\n          '<path d=\"M16 1H4C3 1 2 2 2 3v14h2V3h12V1zm3 4H8C7 5 6 6 6 7v14c0 1 1 2 2 2h11c1 0 2-1 2-2V7c0-1-1-2-2-2zm0 16H8V7h11v14z\"/>' +\r\n        '</svg>'\r\n      ),\r\n      minor: true\r\n    });\r\n\r\n    this._text = null;\r\n    this._pre = document.createElement('pre');\r\n  }\r\n\r\n  _onClick(event) {\r\n    super._onClick(event);\r\n    this._pre.textContent = this._text;\r\n    document.body.appendChild(this._pre);\r\n    getSelection().removeAllRanges();\r\n\r\n    const range = document.createRange();\r\n    range.selectNode(this._pre);\r\n\r\n    window.getSelection().addRange(range);\r\n\r\n    document.execCommand('copy');\r\n    getSelection().removeAllRanges();\r\n    document.body.removeChild(this._pre);\r\n  }\r\n\r\n  setCopyText(text, filename) {\r\n    this._text = text;\r\n  }\r\n}\r\n","import FloatingActionButton from './floating-action-button';\r\n\r\nexport default class BgFillButton extends FloatingActionButton {\r\n  constructor() {\r\n    const title = 'Preview on vivid background';\r\n\r\n    super({\r\n      title,\r\n      iconSvg: (\r\n        '<svg viewBox=\"0 0 24 24\" class=\"icon\">' +\r\n          `<title>${title}</title>` +\r\n          '<path d=\"M21.143 9.667c-.733-1.392-1.914-3.05-3.617-4.753-2.977-2.978-5.478-3.914-6.785-3.914-.414 0-.708.094-.86.246l-1.361 1.36c-1.899-.236-3.42.106-4.294.983-.876.875-1.164 2.159-.792 3.523.492 1.806 2.305 4.049 5.905 5.375.038.323.157.638.405.885.588.588 1.535.586 2.121 0s.588-1.533.002-2.119c-.588-.587-1.537-.588-2.123-.001l-.17.256c-2.031-.765-3.395-1.828-4.232-2.9l3.879-3.875c.496 2.73 6.432 8.676 9.178 9.178l-7.115 7.107c-.234.153-2.798-.316-6.156-3.675-3.393-3.393-3.175-5.271-3.027-5.498l1.859-1.856c-.439-.359-.925-1.103-1.141-1.689l-2.134 2.131c-.445.446-.685 1.064-.685 1.82 0 1.634 1.121 3.915 3.713 6.506 2.764 2.764 5.58 4.243 7.432 4.243.648 0 1.18-.195 1.547-.562l8.086-8.078c.91.874-.778 3.538-.778 4.648 0 1.104.896 1.999 2 1.999 1.105 0 2-.896 2-2 0-3.184-1.425-6.81-2.857-9.34zm-16.209-5.371c.527-.53 1.471-.791 2.656-.761l-3.209 3.206c-.236-.978-.049-1.845.553-2.445zm9.292 4.079l-.03-.029c-1.292-1.292-3.803-4.356-3.096-5.063.715-.715 3.488 1.521 5.062 3.096.862.862 2.088 2.247 2.937 3.458-1.717-1.074-3.491-1.469-4.873-1.462z\"/>' +\r\n        '</svg>'\r\n      ),\r\n      classList: [ 'fillAB' ],\r\n      minor: true\r\n    });\r\n  }\r\n\r\n  _onClick(event) {\r\n    super._onClick(event);\r\n    // event adds a background color\r\n    if (this.container.classList.contains('active')) {\r\n      this.container.classList.remove('active');\r\n      this.setColor('transparent');\r\n    }\r\n    else {\r\n      this.container.classList.add('active');\r\n      this.setColor('rgba(0, 0, 0, 0.7)');\r\n    }\r\n  }\r\n\r\n  setColor(color) {\r\n    document.documentElement.style.backgroundColor = color;\r\n  }\r\n}\r\n","import { strToEl } from '../utils';\r\n\r\nexport default class MaterialSlider {\r\n  constructor(rangeEl) {\r\n    this.container = strToEl(`\r\n      <div class=\"material-slider\">\r\n        <div class=\"track\">\r\n          <div class=\"track-on\"></div>\r\n          <div class=\"handle\">\r\n            <div class=\"arrow\"></div>\r\n            <div class=\"val\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `);\r\n\r\n    this.range = rangeEl;\r\n    this._handle = this.container.querySelector('.handle');\r\n    this._trackOn = this.container.querySelector('.track-on');\r\n    this._val = this.container.querySelector('.val');\r\n\r\n    rangeEl.parentNode.insertBefore(this.container, rangeEl);\r\n    this.container.insertBefore(rangeEl, this.container.firstChild);\r\n\r\n    rangeEl.addEventListener('input', () => this._onInputChange());\r\n    this.range.addEventListener('mousedown', () => this._onRangeMouseDown());\r\n    this.range.addEventListener('touchstart', () => this._onRangeTouchStart());\r\n    this.range.addEventListener('touchend', () => this._onRangeTouchEnd());\r\n\r\n    this._setPosition();\r\n  }\r\n\r\n  _onRangeTouchStart() {\r\n    this.range.focus();\r\n  }\r\n\r\n  _onRangeTouchEnd() {\r\n    this.range.blur();\r\n  }\r\n\r\n  _onRangeMouseDown() {\r\n    this.range.classList.add('active');\r\n\r\n    const upListener = e => {\r\n      // IE requires me to do this. Pah.\r\n      requestAnimationFrame(_ => {\r\n        this.range.blur();\r\n      })\r\n      this.range.classList.remove('active');\r\n      document.removeEventListener('mouseup', upListener);\r\n    }\r\n    document.addEventListener('mouseup', upListener);\r\n  }\r\n\r\n  set value(newVal) {\r\n    this.range.value = newVal;\r\n    this._update();\r\n  }\r\n\r\n  _onInputChange() {\r\n    this._update();\r\n  }\r\n\r\n  _update() {\r\n    requestAnimationFrame(() => this._setPosition());\r\n  }\r\n\r\n  _setPosition() {\r\n    const { min, max, value } = this.range;\r\n    const percent = (Number(value) - min) / (max - min);\r\n\r\n    this._trackOn.style.width =\r\n      this._handle.style.left = percent * 100 + \"%\";\r\n\r\n    this._val.textContent = value;\r\n  }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { domReady } from '../utils';\r\nimport MaterialSlider from './material-slider';\r\nimport Ripple from './ripple';\r\n\r\nexport default class Settings extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n\r\n    this._throttleTimeout = null;\r\n\r\n    domReady.then(() => {\r\n      this._pluginInputs = Array.from(\r\n        document.querySelectorAll('.settings .plugins input')\r\n      );\r\n      this._globalInputs = Array.from(\r\n        document.querySelectorAll('.settings .global input')\r\n      );\r\n\r\n      this._resetRipple = new Ripple();\r\n      this._resetBtn = document.querySelector('.setting-reset');\r\n      this._resetBtn.appendChild(this._resetRipple.container);\r\n\r\n      // map real range elements to Slider instances\r\n      this._sliderMap = new WeakMap();\r\n\r\n      // enhance ranges\r\n      Array.from(\r\n        document.querySelectorAll('.settings input[type=range]')\r\n      ).forEach(el => this._sliderMap.set(el, new MaterialSlider(el)));\r\n\r\n      this.container = document.querySelector('.settings');\r\n      this._scroller = document.querySelector('.settings-scroller');\r\n\r\n      this.container.addEventListener('change', e => this._onChange(e));\r\n      this.container.addEventListener('input', e => this._onChange(e));\r\n      this._scroller.addEventListener('wheel', e => this._onMouseWheel(e));\r\n      this._resetBtn.addEventListener('click', e => this._onReset(e));\r\n\r\n      // Stop double-tap text selection.\r\n      // This stops all text selection which is kinda sad.\r\n      // I think this code will bite me.\r\n      this._scroller.addEventListener('mousedown', e => {\r\n        if (e.target.closest('input[type=range]')) return;\r\n        e.preventDefault();\r\n      });\r\n    });\r\n  }\r\n\r\n  _onMouseWheel(event) {\r\n    // Prevents bounce effect on desktop.\r\n    // Firefox uses DELTA_LINE on a mouse wheel, ignore it\r\n    if (!event.deltaMode) { // 0 is \"pixels\"\r\n      event.preventDefault();\r\n      event.currentTarget.scrollTop += event.deltaY;\r\n    }\r\n  }\r\n\r\n  _onChange(event) {\r\n    clearTimeout(this._throttleTimeout);\r\n\r\n    // throttle range\r\n    if (event.target.type == 'range') {\r\n      this._throttleTimeout = setTimeout(() => this.emit('change'), 150);\r\n    }\r\n    else {\r\n      this.emit('change');\r\n    }\r\n  }\r\n\r\n  _onReset() {\r\n    this._resetRipple.animate();\r\n    const oldSettings = this.getSettings();\r\n    // Set all inputs according to their initial attributes\r\n    for (const inputEl of this._globalInputs) {\r\n      if (inputEl.type == 'checkbox') {\r\n        inputEl.checked = inputEl.hasAttribute('checked');\r\n      }\r\n      else if (inputEl.type == 'range') {\r\n        this._sliderMap.get(inputEl).value = inputEl.getAttribute('value');\r\n      }\r\n    }\r\n\r\n    for (const inputEl of this._pluginInputs) {\r\n      inputEl.checked = inputEl.hasAttribute('checked');\r\n    }\r\n\r\n    this.emit('reset', oldSettings);\r\n    this.emit('change');\r\n  }\r\n\r\n  setSettings(settings) {\r\n    for (const inputEl of this._globalInputs) {\r\n      if (!(inputEl.name in settings)) continue;\r\n\r\n      if (inputEl.type == 'checkbox') {\r\n        inputEl.checked = settings[inputEl.name];\r\n      }\r\n      else if (inputEl.type == 'range') {\r\n        this._sliderMap.get(inputEl).value = settings[inputEl.name];\r\n      }\r\n    }\r\n\r\n    for (const inputEl of this._pluginInputs) {\r\n      if (!(inputEl.name in settings.plugins)) continue;\r\n      inputEl.checked = settings.plugins[inputEl.name];\r\n    }\r\n  }\r\n\r\n  getSettings() {\r\n    // fingerprint is used for cache lookups\r\n    const fingerprint = [];\r\n\r\n    const output = {\r\n      plugins: {}\r\n    };\r\n\r\n    this._globalInputs.forEach(inputEl => {\r\n      if (inputEl.name != 'gzip' && inputEl.name != 'original') {\r\n        if (inputEl.type == 'checkbox') {\r\n          fingerprint.push(Number(inputEl.checked));\r\n        }\r\n        else {\r\n          fingerprint.push('|' + inputEl.value + '|');\r\n        }\r\n      }\r\n\r\n      if (inputEl.type == 'checkbox') {\r\n        output[inputEl.name] = inputEl.checked;\r\n      }\r\n      else {\r\n        output[inputEl.name] = inputEl.value;\r\n      }\r\n    });\r\n\r\n    this._pluginInputs.forEach(inputEl => {\r\n      fingerprint.push(Number(inputEl.checked));\r\n      output.plugins[inputEl.name] = inputEl.checked;\r\n    });\r\n\r\n    output.fingerprint = fingerprint.join();\r\n\r\n    return output;\r\n  }\r\n}\r\n","import {\r\n  domReady,\r\n  transitionFromClass,\r\n  transitionToClass,\r\n  readFileAsText\r\n} from '../utils';\r\nimport Spinner from './spinner';\r\nimport { EventEmitter } from 'events';\r\n\r\nexport default class MainMenu extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n\r\n    this.allowHide = false;\r\n    this._spinner = new Spinner();\r\n\r\n    domReady.then(() => {\r\n      this.container = document.querySelector('.main-menu');\r\n      this._loadFileInput = document.querySelector('.load-file-input');\r\n      this._pasteInput = document.querySelector('.paste-input');\r\n      this._loadDemoBtn = document.querySelector('.load-demo');\r\n      this._loadFileBtn = document.querySelector('.load-file');\r\n      this._pasteLabel = document.querySelector('.menu-input');\r\n      this._overlay = this.container.querySelector('.overlay');\r\n      this._menu = this.container.querySelector('.menu');\r\n\r\n      document.querySelector('.menu-btn')\r\n        .addEventListener('click', e => this._onMenuButtonClick(e));\r\n\r\n      this._overlay.addEventListener('click', e => this._onOverlayClick(e));\r\n\r\n      this._loadFileBtn.addEventListener('click', e => this._onLoadFileClick(e));\r\n      this._loadDemoBtn.addEventListener('click', e => this._onLoadDemoClick(e));\r\n      this._loadFileInput.addEventListener('change', e => this._onFileInputChange(e));\r\n      this._pasteInput.addEventListener('input', e => this._onTextInputChange(e));\r\n    });\r\n  }\r\n\r\n  show() {\r\n    this.container.classList.remove('hidden');\r\n    transitionFromClass(this._overlay, 'hidden');\r\n    transitionFromClass(this._menu, 'hidden');\r\n  }\r\n\r\n  hide() {\r\n    if (!this.allowHide) return;\r\n    this.stopSpinner();\r\n    this.container.classList.add('hidden');\r\n    transitionToClass(this._overlay, 'hidden');\r\n    transitionToClass(this._menu, 'hidden');\r\n  }\r\n\r\n  stopSpinner() {\r\n    this._spinner.hide();\r\n  }\r\n\r\n  showFilePicker() {\r\n    this._loadFileInput.click();\r\n  }\r\n\r\n  _onOverlayClick(event) {\r\n    event.preventDefault();\r\n    this.hide();\r\n  }\r\n\r\n  _onMenuButtonClick(event) {\r\n    event.preventDefault();\r\n    this.show();\r\n  }\r\n\r\n  _onTextInputChange(event) {\r\n    const val = this._pasteInput.value.trim();\r\n\r\n    if (val.includes('</svg>')) {\r\n      this._pasteInput.value = '';\r\n      this._pasteInput.blur();\r\n\r\n      this._pasteLabel.appendChild(this._spinner.container);\r\n      this._spinner.show();\r\n\r\n      this.emit('svgDataLoad', {\r\n        data: val,\r\n        filename: 'image.svg'\r\n      });\r\n    }\r\n  }\r\n\r\n  _onLoadFileClick(event) {\r\n    event.preventDefault();\r\n    event.target.blur();\r\n    this.showFilePicker();\r\n  }\r\n\r\n  async _onFileInputChange(event) {\r\n    const file = this._loadFileInput.files[0];\r\n\r\n    if (!file) return;\r\n\r\n    this._loadFileBtn.appendChild(this._spinner.container);\r\n    this._spinner.show();\r\n\r\n    this.emit('svgDataLoad', {\r\n      data: await readFileAsText(file),\r\n      filename: file.name\r\n    });\r\n  }\r\n\r\n  async _onLoadDemoClick(event) {\r\n    event.preventDefault();\r\n    event.target.blur();\r\n    this._loadDemoBtn.appendChild(this._spinner.container);\r\n    this._spinner.show();\r\n\r\n    try {\r\n      this.emit('svgDataLoad', {\r\n        data: await fetch('test-svgs/car-lite.svg').then(r => r.text()),\r\n        filename: 'car-lite.svg'\r\n      });\r\n    }\r\n    catch (err) {\r\n      // This extra scope is working around a babel-minify bug.\r\n      // It's fixed in Babel 7.\r\n      {\r\n        this.stopSpinner();\r\n\r\n        let error;\r\n\r\n        if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\r\n          error = Error(\"Demo not available offline\");\r\n        }\r\n        else {\r\n          error = Error(\"Couldn't fetch demo SVG\");\r\n        }\r\n\r\n        this.emit('error', { error });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { strToEl, transitionToClass } from '../utils';\r\n\r\nclass Toast {\r\n  constructor(message, duration, buttons) {\r\n    this.container = strToEl(\r\n      '<div class=\"toast\"><div class=\"toast-content\"></div></div>' +\r\n    '');\r\n\r\n    this._content = this.container.querySelector('.toast-content');\r\n    this._content.textContent = message;\r\n    this._answerResolve;\r\n    this._hideTimeout;\r\n\r\n    this.answer = new Promise(r => this._answerResolve = r);\r\n\r\n    buttons.forEach(button => {\r\n      var buttonEl = document.createElement('button');\r\n      buttonEl.className = 'unbutton';\r\n      buttonEl.textContent = button;\r\n      buttonEl.addEventListener('click', () => {\r\n        this._answerResolve(button);\r\n      });\r\n      this.container.appendChild(buttonEl);\r\n    });\r\n\r\n    if (duration) {\r\n      this._hideTimeout = setTimeout(() => this.hide(), duration);\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    clearTimeout(this._hideTimeout);\r\n    this._answerResolve();\r\n    return transitionToClass(this.container, 'hide');\r\n  }\r\n}\r\n\r\nexport default class Toasts {\r\n  constructor() {\r\n    this.container = strToEl(\"<div class='toasts'></div>\");\r\n  }\r\n\r\n  show(message, {\r\n    duration = 0,\r\n    buttons = ['dismiss']\r\n  }={}) {\r\n    const toast = new Toast(message, duration, buttons);\r\n    this.container.appendChild(toast.container);\r\n\r\n    toast.answer.then(() => toast.hide()).then(() => {\r\n      this.container.removeChild(toast.container);\r\n    });\r\n\r\n    return toast;\r\n  }\r\n}\r\n","import {\r\n  strToEl,\r\n  domReady,\r\n  transitionToClass,\r\n  transitionFromClass,\r\n  readFileAsText\r\n} from '../utils';\r\nimport { EventEmitter } from 'events';\r\n\r\nexport default class FileDrop extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n    this.container = strToEl(\r\n      '<div class=\"drop-overlay\">Drop it!</div>' +\r\n    '');\r\n\r\n    // drag events are horrid\r\n    this._activeEnters = 0;\r\n    this._currentEnteredElement = null;\r\n\r\n    domReady.then(_ => {\r\n      document.addEventListener('dragover', event => event.preventDefault());\r\n      document.addEventListener('dragenter', event => this._onDragEnter(event));\r\n      document.addEventListener('dragleave', event => this._onDragLeave(event));\r\n      document.addEventListener('drop', event => this._onDrop(event));\r\n    });\r\n  }\r\n\r\n  _onDragEnter(event) {\r\n    // firefox double-fires on window enter, this works around it\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1124645\r\n    if (this._currentEnteredElement == event.target) return;\r\n    this._currentEnteredElement = event.target;\r\n\r\n    if (!this._activeEnters++) {\r\n      transitionToClass(this.container);\r\n    }\r\n  }\r\n\r\n  _onDragLeave(event) {\r\n    this._currentEnteredElement = null;\r\n\r\n    if (!--this._activeEnters) {\r\n      transitionFromClass(this.container);\r\n    }\r\n  }\r\n\r\n  async _onDrop(event) {\r\n    event.preventDefault();\r\n\r\n    this._activeEnters = 0;\r\n    transitionFromClass(this.container);\r\n\r\n    const file = event.dataTransfer.files[0];\r\n    if (!file) return;\r\n\r\n    this.emit('svgDataLoad', {\r\n      data: await readFileAsText(file),\r\n      filename: file.name\r\n    });\r\n  }\r\n}\r\n","import { domReady, transitionFromClass } from '../utils';\r\n\r\nexport default class Preloader {\r\n  constructor() {\r\n    domReady.then(_ => {\r\n      this.container = document.querySelector('.preloader');\r\n      this.activated = this.container.classList.contains('active');\r\n      this.hide();\r\n    });\r\n  }\r\n\r\n  async hide() {\r\n    await transitionFromClass(this.container, 'active');\r\n    this.container.style.display = 'none';\r\n  }\r\n}\r\n","import { strToEl, escapeHtmlTag, transitionToClass, domReady } from '../utils';\r\n\r\nexport default class Changelog {\r\n  constructor(loadedVersion) {\r\n    this.container = strToEl('<section class=\"changelog\"></section>');\r\n    this._loadedVersion = loadedVersion;\r\n  }\r\n\r\n  async showLogFrom(lastLoadedVersion) {\r\n    if (lastLoadedVersion == this._loadedVersion) return;\r\n    const changelog = await fetch('changelog.json').then(r => r.json());\r\n    let startIndex = 0;\r\n    let endIndex = 0;\r\n\r\n    for (var i = 0; i < changelog.length; i++) {\r\n      const entry = changelog[i];\r\n\r\n      if (entry.version === this._loadedVersion) {\r\n        startIndex = i;\r\n      }\r\n      else if (entry.version === lastLoadedVersion) {\r\n        break;\r\n      }\r\n      endIndex = i + 1;\r\n    }\r\n\r\n    const changeLis = changelog.slice(startIndex, endIndex)\r\n      .reduce((arr, entry) => arr.concat(entry.changes), [])\r\n      .map(change => escapeHtmlTag`<li>${change}</li>`);\r\n\r\n    this.container.appendChild(strToEl('<h1>Updated!</h1>'));\r\n    this.container.appendChild(strToEl(\r\n      '<ul>' +\r\n        changeLis.join('') +\r\n      '</ul>' +\r\n    ''));\r\n\r\n    await domReady;\r\n    transitionToClass(this.container);\r\n  }\r\n}\r\n","import { domReady } from '../utils';\r\n\r\nexport default class ResultsContainer {\r\n  constructor(results) {\r\n    this._results = results;\r\n\r\n    domReady.then(_ => {\r\n      this._mobileContainer = document.querySelector('.results-container-mobile');\r\n      this._container = document.querySelector('.results-container');\r\n      this._query = matchMedia('(min-width: 640px)');\r\n\r\n      this._query.addListener(() => this._positionResults());\r\n      this._positionResults();\r\n    });\r\n  }\r\n\r\n  _positionResults() {\r\n    if (this._query.matches) {\r\n      this._container.appendChild(this._results.container);\r\n    }\r\n    else {\r\n      this._mobileContainer.appendChild(this._results.container);\r\n    }\r\n  }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { domReady } from '../utils';\r\n\r\nexport default class ViewToggler extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n    this.container = null;\r\n\r\n    domReady.then(() => {\r\n      this.container = document.querySelector('.view-toggler');\r\n\r\n      // stop browsers remembering previous form state\r\n      this.container.output[0].checked = true;\r\n\r\n      this.container.addEventListener('change', e => this._onChange(e));\r\n    });\r\n  }\r\n\r\n  _onChange(event) {\r\n    let value = this.container.output.value;\r\n\r\n    if (!value) { // some browsers don't support the nice shortcut above (eg Safari)\r\n      value = Array.from(this.container.output).reduce((value, input) => {\r\n        return value || (input.checked ? input.value : '');\r\n      }, '');\r\n    }\r\n\r\n    this.emit(\"change\", { value });\r\n  }\r\n}\r\n","export default class ResultsCache {\r\n  constructor(size) {\r\n    this._size = size;\r\n    this.purge();\r\n  }\r\n\r\n  purge() {\r\n    this._fingerprints = [];\r\n    this._items = [];\r\n    this._index = 0;\r\n  }\r\n\r\n  add(fingerprint, svgFile) {\r\n    const oldItem = this._items[this._index];\r\n\r\n    if (oldItem) {\r\n      // gc blob url\r\n      oldItem.release();\r\n    }\r\n\r\n    this._fingerprints[this._index] = fingerprint;\r\n    this._items[this._index] = svgFile;\r\n\r\n    this._index = (this._index + 1) % this._size;\r\n  }\r\n\r\n  match(fingerprint) {\r\n    return this._items[this._fingerprints.indexOf(fingerprint)];\r\n  }\r\n}\r\n","import { transitionToClass } from '../utils';\r\n\r\nexport default class MainUi {\r\n  constructor(...elements) {\r\n    this._activated = false;\r\n    this._toActivate = elements;\r\n  }\r\n\r\n  activate() {\r\n    if (this._activated) return;\r\n    this._activated = true;\r\n\r\n    return Promise.all(\r\n      this._toActivate.map(el => transitionToClass(el))\r\n    );\r\n  }\r\n}\r\n","import { idbKeyval as storage } from '../utils/storage';\r\nimport Svgo from './svgo';\r\nimport { domReady } from './utils';\r\nimport Output from './ui/output';\r\nimport DownloadButton from './ui/download-button';\r\nimport CopyButton from './ui/copy-button';\r\nimport { copySupported } from './ui/copy-button';\r\nimport BgFillButton from './ui/bg-fill-button';\r\nimport Results from './ui/results';\r\nimport Settings from './ui/settings';\r\nimport MainMenu from './ui/main-menu';\r\nimport Toasts from './ui/toasts';\r\nimport FileDrop from './ui/file-drop';\r\nimport Preloader from './ui/preloader';\r\nimport Changelog from './ui/changelog';\r\nimport ResultsContainer from './ui/results-container';\r\nimport ViewToggler from './ui/view-toggler';\r\nimport ResultsCache from './results-cache';\r\nimport MainUi from './ui/main-ui';\r\n\r\nconst svgo = new Svgo();\r\n\r\nexport default class MainController {\r\n  constructor() {\r\n    this._container = null;\r\n\r\n    // ui components\r\n    this._mainUi = null;\r\n    this._outputUi = new Output();\r\n    this._downloadButtonUi = new DownloadButton();\r\n    this._copyButtonUi = new CopyButton();\r\n    this._bgFillUi = new BgFillButton();\r\n    this._resultsUi = new Results();\r\n    this._settingsUi = new Settings();\r\n    this._mainMenuUi = new MainMenu();\r\n    this._toastsUi = new Toasts();\r\n    this._dropUi = new FileDrop();\r\n    this._preloaderUi = new Preloader();\r\n    this._changelogUi = new Changelog(self.version);\r\n    this._resultsContainerUi = new ResultsContainer(this._resultsUi);\r\n    this._viewTogglerUi = new ViewToggler();\r\n\r\n    // ui events\r\n    this._settingsUi.on('change', () => this._onSettingsChange());\r\n    this._settingsUi.on('reset', oldSettings => this._onSettingsReset(oldSettings));\r\n    this._mainMenuUi.on('svgDataLoad', e => this._onInputChange(e));\r\n    this._dropUi.on('svgDataLoad', e => this._onInputChange(e));\r\n    this._mainMenuUi.on('error', ({error}) => this._handleError(error));\r\n    this._viewTogglerUi.on('change', e => this._onViewSelectionChange(e));\r\n    window.addEventListener('keydown', e => this._onGlobalKeyDown(e));\r\n\r\n    // state\r\n    this._inputItem = null;\r\n    this._cache = new ResultsCache(10);\r\n    this._latestCompressJobId = 0;\r\n    this._userHasInteracted = false;\r\n    this._reloading = false;\r\n\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.register('sw.js', {\r\n        scope: './'\r\n      }).then(registration => {\r\n        registration.addEventListener('updatefound', () => this._onUpdateFound(registration));\r\n      });\r\n    }\r\n\r\n    // tell the user about the latest update\r\n    storage.get('last-seen-version').then(lastSeenVersion => {\r\n      if (lastSeenVersion) {\r\n        this._changelogUi.showLogFrom(lastSeenVersion);\r\n      }\r\n      storage.set('last-seen-version', self.version);\r\n    });\r\n\r\n    domReady.then(() => {\r\n      this._container = document.querySelector('.app-output');\r\n\r\n      // elements for intro anim\r\n      this._mainUi = new MainUi(\r\n        document.querySelector('.toolbar'),\r\n        document.querySelector('.action-button-container'),\r\n        this._outputUi.container,\r\n        this._settingsUi.container\r\n      );\r\n\r\n      const actionContainer = document.querySelector('.action-button-container');\r\n      const minorActionContainer = document.querySelector('.minor-action-container');\r\n\r\n      minorActionContainer.appendChild(this._bgFillUi.container);\r\n\r\n      if (copySupported) {\r\n        minorActionContainer.appendChild(this._copyButtonUi.container);\r\n      }\r\n\r\n      actionContainer.appendChild(this._downloadButtonUi.container);\r\n\r\n      document.querySelector('.output').appendChild(this._outputUi.container);\r\n      this._container.appendChild(this._toastsUi.container);\r\n      this._container.appendChild(this._dropUi.container);\r\n      document.querySelector('.menu-extra').appendChild(this._changelogUi.container);\r\n\r\n      // load previous settings\r\n      this._loadSettings();\r\n\r\n      // someone managed to hit the preloader, aww\r\n      if (this._preloaderUi.activated) {\r\n        this._toastsUi.show(\"Ready now!\", {\r\n          duration: 3000\r\n        });\r\n      }\r\n\r\n      // for testing\r\n      if (false) {\r\n        (async () => {\r\n          this._onInputChange({\r\n            data: await fetch('test-svgs/car-lite.svg').then(r => r.text()),\r\n            filename: 'car-lite.svg'\r\n          });\r\n        })();\r\n      }\r\n    });\r\n  }\r\n\r\n  _onGlobalKeyDown(event) {\r\n    if (event.key === 'o' && (event.ctrlKey || event.metaKey)) {\r\n      event.preventDefault();\r\n      this._mainMenuUi.showFilePicker();\r\n    }\r\n  }\r\n\r\n  _onViewSelectionChange(event) {\r\n    this._outputUi.set(event.value);\r\n  }\r\n\r\n  _onUpdateFound(registration) {\r\n    const newWorker = registration.installing;\r\n\r\n    registration.installing.addEventListener('statechange', async () => {\r\n      if (this._reloading) return;\r\n\r\n      // the very first activation!\r\n      // tell the user stuff works offline\r\n      if (newWorker.state == 'activated' && !navigator.serviceWorker.controller) {\r\n        this._toastsUi.show(\"Ready to work offline\", {\r\n          duration: 5000\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (newWorker.state == 'activated' && navigator.serviceWorker.controller) {\r\n        // if the user hasn't interacted yet, do a sneaky reload\r\n        if (!this._userHasInteracted) {\r\n          this._reloading = true;\r\n          location.reload();\r\n          return;\r\n        }\r\n\r\n        // otherwise, show the user an alert\r\n        const toast = this._toastsUi.show(\"Update available\", {\r\n          buttons: ['reload', 'dismiss']\r\n        });\r\n\r\n        const answer = await toast.answer;\r\n\r\n        if (answer == 'reload') {\r\n          this._reloading = true;\r\n          location.reload();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  _onSettingsChange() {\r\n    const settings = this._settingsUi.getSettings();\r\n    this._saveSettings(settings);\r\n    this._compressSvg(settings);\r\n  }\r\n\r\n  async _onSettingsReset(oldSettings) {\r\n    const toast = this._toastsUi.show(\"Settings reset\", {\r\n      buttons: ['undo', 'dismiss'],\r\n      duration: 5000\r\n    });\r\n\r\n    if ((await toast.answer) === 'undo') {\r\n      this._settingsUi.setSettings(oldSettings);\r\n      this._onSettingsChange();\r\n    }\r\n  }\r\n\r\n  async _onInputChange(event) {\r\n    const settings = this._settingsUi.getSettings();\r\n    this._userHasInteracted = true;\r\n\r\n    try {\r\n      this._inputItem = await svgo.load(event.data);\r\n      this._inputFilename = event.filename;\r\n    }\r\n    catch(e) {\r\n      // This extra scope is working around a babel-minify bug.\r\n      // It's fixed in Babel 7.\r\n      {\r\n        const error = new Error(\"Load failed: \" + e.message);\r\n        this._mainMenuUi.stopSpinner();\r\n        this._handleError(error);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this._cache.purge();\r\n\r\n    let firstIteration = true;\r\n\r\n    const compressed = () => {\r\n      if (firstIteration) {\r\n        this._outputUi.reset();\r\n        this._mainUi.activate();\r\n        this._mainMenuUi.allowHide = true;\r\n        this._mainMenuUi.hide();\r\n        firstIteration = false;\r\n      }\r\n    }\r\n\r\n    this._compressSvg(settings, () => compressed());\r\n\r\n    if (firstIteration) {\r\n      compressed();\r\n    }\r\n  }\r\n\r\n  _handleError(e) {\r\n    this._toastsUi.show(e.message);\r\n    console.error(e);\r\n  }\r\n\r\n  async _loadSettings() {\r\n    const settings = await storage.get('settings');\r\n    if (settings) this._settingsUi.setSettings(settings);\r\n  }\r\n\r\n  _saveSettings(settings) {\r\n    const copy = Object.assign({}, settings);\r\n    // doesn't make sense to retain the \"show original\" option\r\n    delete copy.original;\r\n    storage.set('settings', copy);\r\n  }\r\n\r\n  async _compressSvg(settings, iterationCallback = function(){}) {\r\n    const thisJobId = this._latestCompressJobId = Math.random();\r\n\r\n    await svgo.abortCurrent();\r\n\r\n    if (thisJobId != this._latestCompressJobId) {\r\n      // while we've been waiting, there's been a newer call\r\n      // to _compressSvg, we don't need to do anything\r\n      return;\r\n    }\r\n\r\n    if (settings.original) {\r\n      this._updateForFile(this._inputItem, {\r\n        compress: settings.gzip\r\n      });\r\n      return;\r\n    }\r\n\r\n    const cacheMatch = this._cache.match(settings.fingerprint);\r\n\r\n    if (cacheMatch) {\r\n      this._updateForFile(cacheMatch, {\r\n        compareToFile: this._inputItem,\r\n        compress: settings.gzip\r\n      });\r\n      return;\r\n    }\r\n\r\n    this._downloadButtonUi.working();\r\n\r\n    try {\r\n      const finalResultFile = await svgo.process(settings, resultFile => {\r\n        iterationCallback(resultFile);\r\n        this._updateForFile(resultFile, {\r\n          compareToFile: this._inputItem,\r\n          compress: settings.gzip\r\n        });\r\n      });\r\n\r\n      this._cache.add(settings.fingerprint, finalResultFile);\r\n    }\r\n    catch(e) {\r\n      if (e.message == \"abort\") return;\r\n      e.message = \"Minifying error: \" + e.message;\r\n      this._handleError(e);\r\n    }\r\n    finally {\r\n      this._downloadButtonUi.done();\r\n    }\r\n  }\r\n\r\n  async _updateForFile(svgFile, { compareToFile, compress }) {\r\n    this._outputUi.update(svgFile);\r\n    this._downloadButtonUi.setDownload(this._inputFilename, svgFile);\r\n    this._copyButtonUi.setCopyText(svgFile.text);\r\n\r\n    this._resultsUi.update({\r\n      comparisonSize: compareToFile && (await compareToFile.size({ compress })),\r\n      size: await svgFile.size({ compress })\r\n    });\r\n  }\r\n}\r\n\r\n","import WorkerMessenger from './worker-messenger';\r\nimport SvgFile from './svg-file';\r\n\r\nexport default class Svgo extends WorkerMessenger {\r\n  constructor() {\r\n    super('js/svgo-worker.js');\r\n    this._abortOnNextIteration = false;\r\n    this._currentJob = Promise.resolve();\r\n  }\r\n\r\n  async load(svgText) {\r\n    const {width, height} = await this._requestResponse({\r\n      action: 'load',\r\n      data: svgText\r\n    });\r\n\r\n    return new SvgFile(svgText, width, height);\r\n  }\r\n\r\n  process(settings, iterationCallback) {\r\n    return this._currentJob = this.abortCurrent().then(async () => {\r\n      this._abortOnNextIteration = false;\r\n\r\n      let result = await this._requestResponse({\r\n        action: 'process',\r\n        settings\r\n      });\r\n\r\n      var resultFile = new SvgFile(result.data, result.dimensions.width, result.dimensions.height);\r\n\r\n      iterationCallback(resultFile);\r\n\r\n      if (settings.multipass) {\r\n        while (result = await this.nextPass()) {\r\n          if (this._abortOnNextIteration) {\r\n            throw Error('abort');\r\n          }\r\n          resultFile = new SvgFile(result.data, result.dimensions.width, result.dimensions.height);\r\n          iterationCallback(resultFile);\r\n        }\r\n      }\r\n\r\n      // return final result\r\n      return resultFile;\r\n    });\r\n  }\r\n\r\n  nextPass() {\r\n    return this._requestResponse({\r\n      action: 'nextPass'\r\n    });\r\n  }\r\n\r\n  async abortCurrent() {\r\n    this._abortOnNextIteration = true;\r\n    await this._currentJob;\r\n  }\r\n\r\n  async release() {\r\n    await this.abortCurrent();\r\n    super.release();\r\n  }\r\n}\r\n","import { trackFocusMethod } from './utils';\r\nimport MainController from './main-controller';\r\n\r\ntrackFocusMethod();\r\nnew MainController();\r\n"],"names":["createContextualFragment","children","replace","map","reduce","Response","text","removeClass","classList","contains","Promise","resolve","target","removeEventListener","remove","add","requestAnimationFrame","addEventListener","x","pageX","y","pageY","Math","abs","sqrt","touches","Array","from","pow","floor","round","init","call","_maxListeners","defaultMaxListeners","length","apply","TypeError","_events","newListener","emit","listener","_eventsCount","unshift","push","warned","Error","name","emitter","type","count","console","warn","log","removeListener","arguments","pop","readyState","document","createRange","selectNode","documentElement","indexedDB","open","onerror","error","onupgradeneeded","result","createObjectStore","onsuccess","transaction","oncomplete","objectStore","get","set","put","delete","self","localStorage","getItem","setItem","removeItem","constructor","_requestId","_pending","_url","_worker","Worker","onmessage","_onMessage","release","terminate","Object","keys","_fulfillPending","id","_postMessage","postMessage","data","_requestResponse","compress","_compressedSize","_blob","width","height","size","then","byteLength","_create","Blob","URL","createObjectURL","blob","url","revokeObjectURL","eventArea","shouldCaptureFunc","_target","_shouldCaptureFunc","_dx","_dy","_scale","_active","_lastPoints","forEach","bind","_onPointerDown","_onWheel","reset","_update","preventDefault","getBoundingClientRect","deltaY","deltaMode","max","min","left","top","_onFirstPointerDown","_onPointerMove","_onPointerUp","which","style","WebkitTransform","transform","container","_svgFrame","querySelector","scrolling","_svgContainer","_panZoom","setSvg","_nextLoadPromise","src","encodeURIComponent","highlight","_codeEl","innerHTML","_types","image","code","_svgFile","_switchQueue","noAnimate","update","_activeType","appendChild","all","removeChild","animate","offsetLeft","_showTimeout","display","show","clearTimeout","setTimeout","hide","title","href","iconSvg","minor","setAttribute","_ripple","_spinner","_onClick","working","done","navigator","msSaveBlob","filename","setDownload","download","queryCommandSupported","_text","_pre","createElement","textContent","body","getSelection","removeAllRanges","window","addRange","execCommand","setCopyText","setColor","backgroundColor","_sizeEl","_newSizeEl","_diffEl","_remainEl","_overEl","comparisonSize","toFixed","prototype","create","EventEmitter","usingDomains","domain","active","Domain","getPrototypeOf","setMaxListeners","isNaN","getMaxListeners","domainEmitter","domainThrown","context","addListener","on","prependListener","once","prependOnceListener","removeAllListeners","listeners","listenerCount","eventNames","Reflect","ownKeys","range","_handle","_trackOn","_val","parentNode","insertBefore","firstChild","_onInputChange","_onRangeMouseDown","_onRangeTouchStart","_onRangeTouchEnd","_setPosition","focus","blur","value","_throttleTimeout","_pluginInputs","querySelectorAll","_globalInputs","_resetRipple","_resetBtn","_sliderMap","WeakMap","_scroller","_onChange","_onMouseWheel","_onReset","closest","currentTarget","scrollTop","getSettings","checked","hasAttribute","getAttribute","setSettings","plugins","fingerprint","join","allowHide","_loadFileInput","_pasteInput","_loadDemoBtn","_loadFileBtn","_pasteLabel","_overlay","_menu","_onMenuButtonClick","_onOverlayClick","_onLoadFileClick","_onLoadDemoClick","_onFileInputChange","_onTextInputChange","stopSpinner","showFilePicker","click","trim","includes","files","fetch","serviceWorker","controller","_content","_answerResolve","_hideTimeout","answer","className","duration","buttons","_activeEnters","_currentEnteredElement","_onDragEnter","_onDragLeave","_onDrop","dataTransfer","activated","_loadedVersion","showLogFrom","json","version","slice","concat","changes","_results","_mobileContainer","_container","_query","matchMedia","_positionResults","matches","output","_size","purge","_fingerprints","_items","_index","match","indexOf","_activated","_toActivate","activate","_abortOnNextIteration","_currentJob","load","action","process","abortCurrent","settings","dimensions","multipass","nextPass","_mainUi","_outputUi","_downloadButtonUi","_copyButtonUi","_bgFillUi","_resultsUi","_settingsUi","_mainMenuUi","_toastsUi","_dropUi","_preloaderUi","_changelogUi","_resultsContainerUi","_viewTogglerUi","_onSettingsChange","_onSettingsReset","_handleError","_onViewSelectionChange","_onGlobalKeyDown","_inputItem","_cache","_latestCompressJobId","_userHasInteracted","_reloading","register","scope","_onUpdateFound","storage","_loadSettings","key","ctrlKey","metaKey","installing","state","location","reload","_saveSettings","_compressSvg","_inputFilename","message","assign","original","random","_updateForFile","gzip","compareToFile"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}