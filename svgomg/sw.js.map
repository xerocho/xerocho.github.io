{"version":3,"file":"sw.js","sources":["../../src/js/sw/index.js","../../src/js/utils/storage.js"],"sourcesContent":["import {idbKeyval as storage} from '../utils/storage.js';\r\n\r\nconst version = SVGOMG_VERSION;\r\nconst cachePrefix = 'svgomg-';\r\nconst staticCacheName = `${cachePrefix}static-${version}`;\r\nconst fontCacheName = `${cachePrefix}fonts`;\r\nconst expectedCaches = [staticCacheName, fontCacheName];\r\n\r\naddEventListener('install', event => {\r\n  event.waitUntil((async () => {\r\n    const activeVersionPromise = storage.get('active-version');\r\n    const cache = await caches.open(staticCacheName);\r\n\r\n    await cache.addAll([\r\n      './',\r\n      'imgs/icon.png',\r\n      'css/all.css',\r\n      'js/gzip-worker.js',\r\n      'js/page.js',\r\n      'js/prism-worker.js',\r\n      'js/svgo-worker.js',\r\n      'changelog.json',\r\n      'https://fonts.googleapis.com/css?family=Roboto:400,700|Inconsolata'\r\n    ]);\r\n\r\n    const activeVersion = await activeVersionPromise;\r\n\r\n    // If it's a major version change, don't skip waiting\r\n    if (!activeVersion || activeVersion.split('.')[0] === version.split('.')[0]) {\r\n      self.skipWaiting();\r\n    }\r\n  })());\r\n});\r\n\r\naddEventListener('activate', event => {\r\n  event.waitUntil((async () => {\r\n    // remove caches beginning \"svgomg-\" that aren't in expectedCaches\r\n    for (const cacheName of await caches.keys()) {\r\n      if (!cacheName.startsWith(cachePrefix)) continue;\r\n      if (!expectedCaches.includes(cacheName)) await caches.delete(cacheName);\r\n    }\r\n\r\n    await storage.set('active-version', version);\r\n  })());\r\n});\r\n\r\nasync function handleFontRequest(request) {\r\n  const match = await caches.match(request);\r\n  if (match) return match;\r\n\r\n  const [response, fontCache] = await Promise.all([\r\n    fetch(request),\r\n    caches.open(fontCacheName)\r\n  ]);\r\n\r\n  fontCache.put(request, response.clone());\r\n  return response;\r\n}\r\n\r\naddEventListener('fetch', event => {\r\n  const url = new URL(event.request.url);\r\n\r\n  if (url.host == 'fonts.gstatic.com') {\r\n    event.respondWith(handleFontRequest(event.request));\r\n    return;\r\n  }\r\n  event.respondWith(\r\n    caches.match(event.request).then(r => r || fetch(event.request))\r\n  );\r\n});\r\n","export let idbKeyval = (() => {\r\n  let db;\r\n\r\n  function getDB() {\r\n    if (!db) {\r\n      db = new Promise((resolve, reject) => {\r\n        const openreq = indexedDB.open('svgo-keyval', 1);\r\n\r\n        openreq.onerror = () => {\r\n          reject(openreq.error);\r\n        };\r\n\r\n        openreq.onupgradeneeded = () => {\r\n          // First time setup: create an empty object store\r\n          openreq.result.createObjectStore('keyval');\r\n        };\r\n\r\n        openreq.onsuccess = () => {\r\n          resolve(openreq.result);\r\n        };\r\n      });\r\n    }\r\n    return db;\r\n  }\r\n\r\n  async function withStore(type, callback) {\r\n    const db = await getDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction('keyval', type);\r\n      transaction.oncomplete = () => resolve();\r\n      transaction.onerror = () => reject(transaction.error);\r\n      callback(transaction.objectStore('keyval'));\r\n    });\r\n  }\r\n\r\n  return {\r\n    async get(key) {\r\n      let req;\r\n      await withStore('readonly', store => {\r\n        req = store.get(key);\r\n      });\r\n      return req.result;\r\n    },\r\n    set(key, value) {\r\n      return withStore('readwrite', store => {\r\n        store.put(value, key);\r\n      });\r\n    },\r\n    delete(key) {\r\n      return withStore('readwrite', store => {\r\n        store.delete(key);\r\n      });\r\n    }\r\n  };\r\n})();\r\n\r\n// iOS add-to-homescreen is missing IDB, or at least it used to.\r\n// I haven't tested this in a while.\r\nif (!self.indexedDB) {\r\n  idbKeyval = {\r\n    get: key => Promise.resolve(localStorage.getItem(key)),\r\n    set: (key, val) => Promise.resolve(localStorage.setItem(key, val)),\r\n    delete: key => Promise.resolve(localStorage.removeItem(key))\r\n  };\r\n}\r\n"],"names":["caches","match","Promise","all","fetch","open","put","clone","indexedDB","onerror","error","onupgradeneeded","result","createObjectStore","onsuccess","transaction","oncomplete","objectStore","get","set","delete","self","resolve","localStorage","getItem","setItem","removeItem","addEventListener","waitUntil","storage","addAll","split","skipWaiting","keys","startsWith","includes","URL","request","url","host","respondWith","then"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}