{"version":3,"file":"gzip-worker.js","sources":["../../node_modules/pako/lib/zlib/trees.js","../../node_modules/pako/lib/zlib/deflate.js","../../node_modules/pako/lib/utils/strings.js","../../node_modules/pako/lib/deflate.js","../../node_modules/pako/lib/utils/common.js","../../node_modules/pako/lib/zlib/adler32.js","../../node_modules/pako/lib/zlib/crc32.js","../../node_modules/pako/lib/zlib/messages.js","../../node_modules/pako/lib/zlib/zstream.js","../../src/js/gzip-worker/index.js"],"sourcesContent":["'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n","import {gzip} from 'pako/lib/deflate';\r\n\r\nself.onmessage = function(event) {\r\n  try {\r\n    var result = gzip(event.data.data).buffer;\r\n    self.postMessage({\r\n      id: event.data.id,\r\n      result: result\r\n    });\r\n  }\r\n  catch (error) {\r\n    self.postMessage({\r\n      id: event.data.id,\r\n      error: error.message\r\n    });\r\n  }\r\n};"],"names":["length","static_tree","extra_bits","extra_base","elems","max_length","has_stree","dyn_tree","max_code","stat_desc","pending_buf","pending","bi_valid","bi_buf","bl_count","heap","heap_max","opt_len","static_len","Array","MAX_BITS","LENGTH_CODES","L_CODES","LITERALS","dyn_ltree","dyn_dtree","bl_tree","last_lit","matches","utils","arraySet","window","heap_len","depth","d_buf","l_buf","l_desc","d_desc","bl_desc","BL_CODES","msg","state","avail_out","output","pending_out","next_out","total_out","_tr_flush_block","block_start","strstart","strm","avail_in","input","next_in","wrap","adler","adler32","crc32","total_in","max_chain_length","prev_length","nice_match","w_size","w_mask","prev","good_match","lookahead","match_start","window_size","hash_size","head","insert","ins_h","hash_shift","hash_mask","match_length","_tr_tally","max_lazy_match","prev_match","strategy","match_available","good_length","max_lazy","nice_length","max_chain","func","level","status","pending_buf_size","gzhead","gzindex","method","last_flush","w_bits","hash_bits","Buf16","lit_bufsize","data_type","_tr_init","Buf8","subarray","apply","shrinkBuf","options","assign","chunkSize","windowBits","memLevel","to","raw","gzip","err","ended","chunks","zlib_deflate","deflateInit2","Error","header","deflateSetHeader","dictionary","string2buf","call","Uint8Array","deflateSetDictionary","_dict_set","push","result","String","fromCharCode","Object","prototype","hasOwnProperty","Uint16Array","Int32Array","slice","arguments","shift","TypeError","set","flattenChunks","concat","setTyped","D_CODES","HEAP_SIZE","zero","MAX_MATCH","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_DEFAULT_COMPRESSION","Z_DEFLATED","text","hcrc","extra","name","comment","time","os","charCodeAt","_tr_align","_tr_stored_block","toString","deflate","onEnd","onData","buf2binstring","deflateEnd","join","self","onmessage","data","buffer","postMessage","id","error","message"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}